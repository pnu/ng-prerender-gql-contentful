# source: https://graphql.contentful.com/content/v1/spaces/bswbys9qvg7q?access_token=0AC3sRBQaFKYMFE49zQrcgVYe-aXpOw4dlB8gcpiYBE
# timestamp: Thu Sep 12 2019 15:53:18 GMT+0300 (Eastern European Summer Time)

"""Represents a binary file in a space. An asset can be any file type."""
type Asset {
  sys: Sys!
  title: String
  description: String
  contentType: String
  fileName: String
  size: Int
  url(transform: ImageTransformOptions): String
  width: Int
  height: Int
  linkedFrom: AssetLinkingCollections
}

type AssetCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Asset]!
}

input AssetFilter {
  sys: SysFilter
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  description_exists: Boolean
  description: String
  description_not: String
  description_in: [String]
  description_not_in: [String]
  description_contains: String
  description_not_contains: String
  url_exists: Boolean
  url: String
  url_not: String
  url_in: [String]
  url_not_in: [String]
  url_contains: String
  url_not_contains: String
  size_exists: Boolean
  size: Int
  size_not: Int
  size_in: [Int]
  size_not_in: [Int]
  size_gt: Int
  size_gte: Int
  size_lt: Int
  size_lte: Int
  contentType_exists: Boolean
  contentType: String
  contentType_not: String
  contentType_in: [String]
  contentType_not_in: [String]
  contentType_contains: String
  contentType_not_contains: String
  fileName_exists: Boolean
  fileName: String
  fileName_not: String
  fileName_in: [String]
  fileName_not_in: [String]
  fileName_contains: String
  fileName_not_contains: String
  width_exists: Boolean
  width: Int
  width_not: Int
  width_in: [Int]
  width_not_in: [Int]
  width_gt: Int
  width_gte: Int
  width_lt: Int
  width_lte: Int
  height_exists: Boolean
  height: Int
  height_not: Int
  height_in: [Int]
  height_not_in: [Int]
  height_gt: Int
  height_gte: Int
  height_lt: Int
  height_lte: Int
  OR: [AssetFilter]
  AND: [AssetFilter]
}

type AssetLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
  categoryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): CategoryCollection
  productCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): ProductCollection
  brandCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): BrandCollection
}

enum AssetOrder {
  url_ASC
  url_DESC
  size_ASC
  size_DESC
  contentType_ASC
  contentType_DESC
  fileName_ASC
  fileName_DESC
  width_ASC
  width_DESC
  height_ASC
  height_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/bswbys9qvg7q/content_types/brand)
"""
type Brand implements Entry {
  sys: Sys!
  linkedFrom: BrandLinkingCollections
  companyName: String
  logo(preview: Boolean, locale: String): Asset
  companyDescription: String
  website: String
  twitter: String
  email: String
  phone: [String]
}

type BrandCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Brand]!
}

input BrandFilter {
  sys: SysFilter
  companyName_exists: Boolean
  companyName: String
  companyName_not: String
  companyName_in: [String]
  companyName_not_in: [String]
  companyName_contains: String
  companyName_not_contains: String
  companyDescription_exists: Boolean
  companyDescription: String
  companyDescription_not: String
  companyDescription_in: [String]
  companyDescription_not_in: [String]
  companyDescription_contains: String
  companyDescription_not_contains: String
  website_exists: Boolean
  website: String
  website_not: String
  website_in: [String]
  website_not_in: [String]
  website_contains: String
  website_not_contains: String
  twitter_exists: Boolean
  twitter: String
  twitter_not: String
  twitter_in: [String]
  twitter_not_in: [String]
  twitter_contains: String
  twitter_not_contains: String
  email_exists: Boolean
  email: String
  email_not: String
  email_in: [String]
  email_not_in: [String]
  email_contains: String
  email_not_contains: String
  phone_contains_all: [String]
  phone_contains_some: [String]
  phone_contains_none: [String]
  OR: [BrandFilter]
  AND: [BrandFilter]
}

type BrandLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
}

enum BrandOrder {
  website_ASC
  website_DESC
  twitter_ASC
  twitter_DESC
  email_ASC
  email_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/bswbys9qvg7q/content_types/category)
"""
type Category implements Entry {
  sys: Sys!
  linkedFrom: CategoryLinkingCollections
  title: String
  icon(preview: Boolean, locale: String): Asset
  categoryDescription: String
}

type CategoryCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Category]!
}

input CategoryFilter {
  sys: SysFilter
  title_exists: Boolean
  title: String
  title_not: String
  title_in: [String]
  title_not_in: [String]
  title_contains: String
  title_not_contains: String
  categoryDescription_exists: Boolean
  categoryDescription: String
  categoryDescription_not: String
  categoryDescription_in: [String]
  categoryDescription_not_in: [String]
  categoryDescription_contains: String
  categoryDescription_not_contains: String
  OR: [CategoryFilter]
  AND: [CategoryFilter]
}

type CategoryLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
  productCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): ProductCollection
}

enum CategoryOrder {
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z,
    compliant with the 'date-time' format outlined in section 5.6 of
    the RFC 3339 profile of the ISO 8601 standard for representation
    of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`.
"""
scalar Dimension

interface Entry {
  sys: Sys!
}

type EntryCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Entry]!
}

"""The 'HexColor' type represents color in `rgb:ffffff` string format."""
scalar HexColor

enum ImageFormat {
  """JPG image format."""
  JPG

  """
  Progressive JPG format stores multiple passes of an image in progressively higher detail.
          When a progressive image is loading, the viewer will first see a lower quality pixelated version which
          will gradually improve in detail, until the image is fully downloaded. This is to display an image as
          early as possible to make the layout look as designed.
  """
  JPG_PROGRESSIVE

  """PNG image format"""
  PNG

  """
  8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
          The 8-bit PNG format is mostly used for simple images, such as icons or logos.
  """
  PNG8

  """WebP image format."""
  WEBP
}

enum ImageResizeFocus {
  """Focus the resizing on the center."""
  CENTER

  """Focus the resizing on the top."""
  TOP

  """Focus the resizing on the top right."""
  TOP_RIGHT

  """Focus the resizing on the right."""
  RIGHT

  """Focus the resizing on the bottom right."""
  BOTTOM_RIGHT

  """Focus the resizing on the bottom."""
  BOTTOM

  """Focus the resizing on the bottom left."""
  BOTTOM_LEFT

  """Focus the resizing on the left."""
  LEFT

  """Focus the resizing on the top left."""
  TOP_LEFT

  """Focus the resizing on the largest face."""
  FACE

  """Focus the resizing on the area containing all the faces."""
  FACES
}

enum ImageResizeStrategy {
  """Resizes the image to fit into the specified dimensions."""
  FIT

  """
  Resizes the image to the specified dimensions, padding the image if needed.
          Uses desired background color as padding color.
  """
  PAD

  """
  Resizes the image to the specified dimensions, cropping the image if needed.
  """
  FILL

  """
  Resizes the image to the specified dimensions, changing the original aspect ratio if needed.
  """
  SCALE

  """
  Crops a part of the original image to fit into the specified dimensions.
  """
  CROP

  """Creates a thumbnail from the image."""
  THUMB
}

input ImageTransformOptions {
  """Desired width in pixels. Defaults to the original image width."""
  width: Dimension

  """Desired height in pixels. Defaults to the original image height."""
  height: Dimension

  """
  Desired quality of the image in percents.
          Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
  """
  quality: Quality

  """
  Desired corner radius in pixels.
          Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
          Defaults to `0`. Uses desired background color as padding color,
          unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
  """
  cornerRadius: Int

  """Desired resize strategy. Defaults to `FIT`."""
  resizeStrategy: ImageResizeStrategy

  """Desired resize focus area. Defaults to `CENTER`."""
  resizeFocus: ImageResizeFocus

  """
  Desired background color, used with corner radius or `PAD` resize strategy.
          Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
  """
  backgroundColor: HexColor

  """Desired image format. Defaults to the original image format."""
  format: ImageFormat
}

"""
[See type definition](https://app.contentful.com/spaces/bswbys9qvg7q/content_types/product)
"""
type Product implements Entry {
  sys: Sys!
  linkedFrom: ProductLinkingCollections
  productName: String
  slug: String
  productDescription: String
  sizetypecolor: String
  imageCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): AssetCollection
  tags: [String]
  categoriesCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): ProductCategoriesCollection
  price: Float
  brand(preview: Boolean, locale: String): Entry
  quantity: Int
  sku: String
  website: String
}

type ProductCategoriesCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Category]!
}

type ProductCollection {
  total: Int!
  skip: Int!
  limit: Int!
  items: [Product]!
}

input ProductFilter {
  sys: SysFilter
  productName_exists: Boolean
  productName: String
  productName_not: String
  productName_in: [String]
  productName_not_in: [String]
  productName_contains: String
  productName_not_contains: String
  slug_exists: Boolean
  slug: String
  slug_not: String
  slug_in: [String]
  slug_not_in: [String]
  slug_contains: String
  slug_not_contains: String
  productDescription_exists: Boolean
  productDescription: String
  productDescription_not: String
  productDescription_in: [String]
  productDescription_not_in: [String]
  productDescription_contains: String
  productDescription_not_contains: String
  sizetypecolor_exists: Boolean
  sizetypecolor: String
  sizetypecolor_not: String
  sizetypecolor_in: [String]
  sizetypecolor_not_in: [String]
  sizetypecolor_contains: String
  sizetypecolor_not_contains: String
  image_contains_all: [String]
  image_contains_some: [String]
  image_contains_none: [String]
  tags_contains_all: [String]
  tags_contains_some: [String]
  tags_contains_none: [String]
  categories_contains_all: [String]
  categories_contains_some: [String]
  categories_contains_none: [String]
  price_exists: Boolean
  price: Float
  price_not: Float
  price_in: [Float]
  price_not_in: [Float]
  price_gt: Float
  price_gte: Float
  price_lt: Float
  price_lte: Float
  quantity_exists: Boolean
  quantity: Int
  quantity_not: Int
  quantity_in: [Int]
  quantity_not_in: [Int]
  quantity_gt: Int
  quantity_gte: Int
  quantity_lt: Int
  quantity_lte: Int
  sku_exists: Boolean
  sku: String
  sku_not: String
  sku_in: [String]
  sku_not_in: [String]
  sku_contains: String
  sku_not_contains: String
  website_exists: Boolean
  website: String
  website_not: String
  website_in: [String]
  website_not_in: [String]
  website_contains: String
  website_not_contains: String
  OR: [ProductFilter]
  AND: [ProductFilter]
}

type ProductLinkingCollections {
  entryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String): EntryCollection
}

enum ProductOrder {
  slug_ASC
  slug_DESC
  sizetypecolor_ASC
  sizetypecolor_DESC
  price_ASC
  price_DESC
  quantity_ASC
  quantity_DESC
  sku_ASC
  sku_DESC
  website_ASC
  website_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
The 'Quality' type represents quality as whole numeric values between `1` and `100`.
"""
scalar Quality

type Query {
  asset(id: String!, preview: Boolean, locale: String): Asset
  assetCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: AssetFilter, order: [AssetOrder]): AssetCollection
  category(id: String!, preview: Boolean, locale: String): Category
  categoryCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: CategoryFilter, order: [CategoryOrder]): CategoryCollection
  product(id: String!, preview: Boolean, locale: String): Product
  productCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: ProductFilter, order: [ProductOrder]): ProductCollection
  brand(id: String!, preview: Boolean, locale: String): Brand
  brandCollection(skip: Int = 0, limit: Int = 100, preview: Boolean, locale: String, where: BrandFilter, order: [BrandOrder]): BrandCollection
}

type Sys {
  id: String!
  spaceId: String!
  environmentId: String!
  publishedAt: DateTime
  firstPublishedAt: DateTime
  publishedVersion: Int
}

input SysFilter {
  id_exists: Boolean
  id: String
  id_not: String
  id_in: [String]
  id_not_in: [String]
  id_contains: String
  id_not_contains: String
  publishedAt_exists: Boolean
  publishedAt: String
  publishedAt_not: String
  publishedAt_in: [String]
  publishedAt_not_in: [String]
  publishedAt_contains: String
  publishedAt_not_contains: String
  firstPublishedAt_exists: Boolean
  firstPublishedAt: String
  firstPublishedAt_not: String
  firstPublishedAt_in: [String]
  firstPublishedAt_not_in: [String]
  firstPublishedAt_contains: String
  firstPublishedAt_not_contains: String
  publishedVersion_exists: Boolean
  publishedVersion: String
  publishedVersion_not: String
  publishedVersion_in: [String]
  publishedVersion_not_in: [String]
  publishedVersion_contains: String
  publishedVersion_not_contains: String
}
